substitutions:
  _BUILD_ID: $BUILD_ID

steps:
- id: 'branch name'
  name: 'ubuntu'
  entrypoint: 'sh'  
  args: 
  - '-c'
  - | 
      echo "***********************"
      echo "$BRANCH_NAME"
      echo "***********************"

# Step 1: Initialize Terraform
- id: 'tf init'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform init
      else
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../
        done
      fi 

# Step 2: Run Terraform Plan
- id: 'tf plan'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform plan -var="build_id=$_BUILD_ID" || echo "fail" > /workspace/fail.flag
      else
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFORM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan -var="build_id=$_BUILD_ID" || { echo "fail" > /workspace/fail.flag; exit 1 }
          cd ../../
        done
      fi 

# Step 2: Run Terraform Apply
- id: 'tf apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME      
        terraform apply -var="build_id="$_BUILD_ID" -auto-approve || echo "fail" > /workspace/fail.flag
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi

# This is to delete all resources created in case the Build job fails 
- id: 'rollback-on-failure'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
        if [ -f /workspace/fail.flag ]; then
          echo "Detected build failure — rolling back this build's resources..."
          cd environments/$BRANCH_NAME
          terraform init
          terraform destroy -var="build_id=$_BUILD_ID" -auto-approve || echo "Rollback failed."
        else
          echo "Build succeeded — skipping rollback."
        fi
  waitFor: ['-']

options:
  logging: CLOUD_LOGGING_ONLY
