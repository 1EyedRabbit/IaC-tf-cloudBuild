steps:
# Step 1: Initialize Terraform
- id: 'tf init'
  name: 'hashicorp/terraform:1.0.0' # Uses a public Terraform Docker image
  script: terraform init

# Step 2: Run Terraform Plan
- id: 'tf plan'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
        BRANCH_NAME=(basename"_REF") # Get the current branch name from Cloud Build substitution variable
        if; then
            # If the branch matches an environment folder (e.g., 'dev', 'prod'), plan only for that environment
            cd environments/${BRANCH_NAME}
            terraform plan
        else
            # For feature branches, plan for all environments to ensure proposed changes are valid across the board
            for dir in environments/*/
            do
                cd ${dir}
                env=${dir%*/}
                env=${env#/}
                echo ""
                echo "************** TERRAFORM PLAN "
                echo " At environment: ${env} "
                echo "******************************"
                terraform plan |
                | exit 1 # Fail the build if any plan fails
                cd../../ # Go back to the root directory
            done
        fi

# Step 3: Run Terraform Apply (conditionally)
- id: 'tf apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
        BRANCH_NAME=(basename"_REF")
        if; then
            # If the branch matches an environment folder, apply the changes
            cd environments/${BRANCH_NAME}
            terraform apply -auto-approve # Automatically approves the plan
        else
            # For feature branches, explicitly skip the apply step
            echo "*************************************************** SKIPPING APPLYING "
            echo "Branch '$BRANCH_NAME' does not represent an official environment."
            echo "******************************************************************"
        fi

options:
  logging: CLOUD_LOGGING_ONLY
